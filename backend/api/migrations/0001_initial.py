# Generated by Django 4.2 on 2023-06-05 19:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='User id')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('email_verified', models.BooleanField(default=False)),
                ('recovery_email', models.EmailField(blank=True, max_length=254, verbose_name='Recovery email')),
                ('phone', models.CharField(blank=True, max_length=17, verbose_name='Phone number')),
                ('recovery_phone', models.CharField(blank=True, max_length=17, verbose_name='Recovery phone number')),
                ('balance', models.DecimalField(decimal_places=4, default=0, max_digits=19, validators=[django.core.validators.MinValueValidator(0)])),
                ('last_ipv4', models.CharField(blank=True, default='0.0.0.0', max_length=55, validators=[django.core.validators.validate_ipv4_address], verbose_name='Last ipv4')),
                ('user_role', models.CharField(choices=[('deleted', 'Deleted'), ('suspended', 'Suspended'), ('guest', 'Guest'), ('normal', 'Normal'), ('mod', 'Moderator'), ('admin', 'Administrator')], default='normal', max_length=10, verbose_name='User role')),
                ('deleted_at', models.DateTimeField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BugReport',
            fields=[
                ('bug_report_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_description', models.CharField(max_length=5000)),
                ('bug_report_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'BugReports',
                'db_table': 'bug_reports',
            },
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Hashtags',
                'db_table': 'hashtags',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text_content', models.CharField(max_length=40000)),
                ('file_url', models.URLField(blank=True, max_length=300, null=True)),
                ('post_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('audio', 'Audio')], default='text', max_length=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('hashtags', models.ManyToManyField(blank=True, related_name='posts', to='api.hashtag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Posts',
                'db_table': 'posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('feedback_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.CharField(max_length=750)),
                ('feedback_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'userfeedback',
            },
        ),
        migrations.CreateModel(
            name='UserNotificationPreferences',
            fields=[
                ('user', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='notification_preferences', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_all_email', models.BooleanField(default=True)),
                ('is_all_push', models.BooleanField(default=True)),
                ('is_all_inapp', models.BooleanField(default=True)),
                ('is_comment_on_post_email', models.BooleanField(default=True)),
                ('is_new_follower_email', models.BooleanField(default=True)),
                ('is_comment_on_post_push', models.BooleanField(default=True)),
                ('is_new_follower_push', models.BooleanField(default=True)),
                ('is_comment_on_post_inapp', models.BooleanField(default=True)),
                ('is_new_follower_inapp', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'UsersNotificationPreferences',
                'db_table': 'users_notification_preferences',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_status', models.CharField(max_length=50)),
                ('status_reason', models.CharField(max_length=100)),
                ('transaction_type', models.CharField(max_length=11)),
                ('price', models.DecimalField(decimal_places=4, max_digits=19)),
                ('payment_method', models.CharField(max_length=100)),
                ('transaction_date', models.DateTimeField()),
                ('last_updated', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Transactions',
                'db_table': 'transactions',
            },
        ),
        migrations.CreateModel(
            name='SubscribedHashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashtag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.hashtag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'SubscribedHashtags',
                'db_table': 'subscribed_hashtags',
            },
        ),
        migrations.CreateModel(
            name='ReportedPost',
            fields=[
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_reason', models.CharField(max_length=300)),
                ('reported_x_times', models.IntegerField(default=1)),
                ('first_report_time', models.DateTimeField(auto_now_add=True)),
                ('last_report_time', models.DateField(auto_now=True, null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.post')),
            ],
            options={
                'verbose_name_plural': 'ReportedPosts',
                'db_table': 'reported_posts',
            },
        ),
        migrations.CreateModel(
            name='Following',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fallowings', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fallowers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'followings',
                'db_table': 'following',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Comment id')),
                ('text_content', models.CharField(max_length=10000)),
                ('file_url', models.URLField(blank=True, max_length=300, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Comments',
                'db_table': 'comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookmarkedPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bookmarked_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'BookmarkedPosts',
                'db_table': 'bookmarked_posts',
            },
        ),
        migrations.CreateModel(
            name='Ad',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ad id')),
                ('ad_name', models.CharField(max_length=50)),
                ('text_content', models.CharField(max_length=1000)),
                ('ad_file_url', models.URLField(blank=True, max_length=300)),
                ('ad_url', models.URLField(blank=True, max_length=300)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('targ_age_start', models.SmallIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(125)])),
                ('targ_age_end', models.SmallIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(125)])),
                ('targ_gender', models.CharField(blank=True, choices=[('woman', 'Woman'), ('man', 'Man'), ('trans woman', 'Trans Woman'), ('trans man', 'Trans Man'), ('other', 'Other')], max_length=11)),
                ('targ_relationship', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('partnership', 'Partnership'), ('open', 'Open'), ('poly', 'Poly'), ('other', 'Other')], max_length=11)),
                ('targ_country', models.CharField(blank=True, max_length=100)),
                ('targ_city', models.CharField(blank=True, max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Ads',
                'db_table': 'ads',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('profile_pic_url', models.ImageField(default='http://jasma-api-server:8000/media/images/avatars/default-profile-pic.webp', upload_to='http://jasma-api-server:8000/media/images/avatars/')),
                ('given_name', models.CharField(blank=True, max_length=35)),
                ('last_name', models.CharField(blank=True, max_length=35)),
                ('display_name', models.CharField(blank=True, max_length=70)),
                ('bio', models.CharField(blank=True, max_length=5000)),
                ('date_of_birth', models.DateField(blank=True)),
                ('gender', models.CharField(blank=True, choices=[('woman', 'Woman'), ('man', 'Man'), ('trans woman', 'Trans Woman'), ('trans man', 'Trans Man'), ('other', 'Other')], max_length=11)),
                ('relationship', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('partnership', 'Partnership'), ('open', 'Open'), ('poly', 'Poly'), ('other', 'Other')], max_length=11)),
                ('language', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('website', models.URLField(blank=True, max_length=300)),
                ('relationship_with', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='relationships_with', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'UsersProfiles',
                'db_table': 'users_profiles',
            },
        ),
        migrations.AddConstraint(
            model_name='subscribedhashtag',
            constraint=models.UniqueConstraint(fields=('user', 'hashtag'), name='composite_pk_on_subscribed_hashtags'),
        ),
        migrations.AddConstraint(
            model_name='reportedpost',
            constraint=models.UniqueConstraint(fields=('post',), name='unique_reported_post'),
        ),
        migrations.AddConstraint(
            model_name='following',
            constraint=models.UniqueConstraint(fields=('user', 'following'), name='composite_pk_on_following'),
        ),
        migrations.AddConstraint(
            model_name='bookmarkedpost',
            constraint=models.UniqueConstraint(fields=('user', 'post'), name='composite_pk_on_bookmarked_posts'),
        ),
    ]
