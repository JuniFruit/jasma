worker_processes auto;
worker_rlimit_nofile 100000;
error_log /var/log/nginx/error.log crit;
rtmp_auto_push on;


events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;
    # accept as many connections as possible, may flood worker connections if set too low â€” for testing environment
    multi_accept on;
}
rtmp {
    server {
        listen 1935;
        ping 30s;
        notify_method get;
        chunk_size 4096;

        # video on demand for flv files
        application vod {
            play /mnt/flvs;
        }

        application vod2 {
            play /mnt/mp4s;
        }

        application live {
            live on;
            allow play all;
            # allow publish all;
            # Should be changed to match current server
            # on_publish http://main_server:9000/publish;
            # on_done http://main_server/done;

            # Once receive stream, transcode for adaptive streaming
            # This single ffmpeg command takes the input and transforms
            # the source into 4 different streams with different bitrate
            # and quality. P.S. The scaling done here respects the aspect
            # ratio of the input.

            # exec ffmpeg -i rtmp://jasma_live/$app/$name  -async 1 -vsync -1		## Transcoding can be enabled here, or by using the abshls application below.
	        #     -c:v libx264 -acodec copy -b:v 400k -profile:v high -b:a 128k -vf "scale=360:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://jasma_live/show/$name_360
            #     -c:v libx264 -acodec copy -b:v 500K -profile:v high -b:a 128k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://jasma_live/show/$name_480
            #     -c:v libx264 -acodec copy -b:v 1500K -profile:v high -b:a 128k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://jasma_live/show/$name_720
            #     -c:v libx264 -acodec copy -b:v 3000K -profile:v high -b:a 128k -vf "scale=1080:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://jasma_live/show/$name_1080
            #     -c copy -f flv rtmp://jasma_live/show/$name_src;
            exec_push bash /opt/live_app/transcode_script.sh $app $name;
           
	        max_connections 100; # Sets maximum number of connections for rtmp engine. Default=off. 
	        meta on;

            record all;
            record_path /mnt/recordings;
            record_unique on;
            record_append on;
            exec_record_done ffmpeg -i /mnt/recordings -f mp4 /mnt/mp4s/$basename.mp4;
         
         
        }

        application show {
            live on;

            hls on; # Enable HTTP Live Streaming
            hls_fragment 10s;
            hls_playlist_length 30s;
            hls_sync 100ms;
            meta copy;
            hls_continuous on;
            deny play all;
            # Pointing this to an SSD is better as this involves lots of IO
            hls_path /mnt/hls/;
            hls_cleanup on;
            hls_fragment_naming system;
            hls_nested on;
       
            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _360 BANDWIDTH=288000; # Low bitrate, sub-SD resolution
            hls_variant _480 BANDWIDTH=448000; # Medium bitrate, SD resolution
            hls_variant _720 BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            hls_variant _1080 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
            hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
        }
    }
}

# This server can be written in any other framework. I've made it here for simplicity

http {
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    server {
        listen 8000;
        location / {
            root /www;
        }

         location /stat {
            rtmp_stat all;

            # Use this stylesheet to view XML as web page
            # in browser
            rtmp_stat_stylesheet stat.xsl;
        }

        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                application/octet-stream.ts;
                video/mp2t ts;
                video/x-flv flv;
                video/mp4 mp4;
                video/webm webm;

            }
            root /mnt;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }
    }
}