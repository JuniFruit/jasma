-- Use this file to initialize the PostGreSQL database only once, before starting the server for the first time.

-- Create the database
CREATE DATABASE "jasmaDB"
    WITH
    OWNER = postgres
    TEMPLATE = template0
    ENCODING = 'UTF8'
    LC_COLLATE = 'en_US.UTF-8'
    LC_CTYPE = 'en_US.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

COMMENT ON DATABASE "jasmaDB"
    IS 'The Database for the JASMA App';

-- Connect to the newly created database as current user
\c jasmaDB

-- Grant full permissions on the database

GRANT ALL PRIVILEGES ON ALL TABLES    IN SCHEMA public to postgres;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public to postgres;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public to postgres;

-- Drop tables first in case something is wrong
-- Create the tables

-- Create the tables
-- some column names have table name in front of them to prevent using SQL keywords
-- For a list of SQL keywords see: https://www.postgresql.org/docs/current/sql-keywords-appendix.html
-- UUIDs are generated by the server, not in PSQL.
CREATE TABLE IF NOT EXISTS users(
    user_id         UUID PRIMARY KEY,
    username        VARCHAR(25) UNIQUE NOT NULL,
    email           VARCHAR(50) UNIQUE NOT NULL,
    recovery_email  VARCHAR(50),
    phone           VARCHAR(20),
    recovery_phone  VARCHAR(20),
    user_password   CHAR(60) NOT NULL
);

-- Create indexes for faster querying on usernames (the primary way to retrieve data)
CREATE INDEX users_username_idx ON users (username);
CREATE INDEX users_email_idx ON users (email);

-- One to one relationship with table users
CREATE TABLE IF NOT EXISTS users_info(
    user_id         UUID REFERENCES users(user_id) ON DELETE CASCADE UNIQUE NOT NULL,
    profile_pic     BYTEA
    first_name      VARCHAR(35),
    last_name       VARCHAR(35),
    bio             TEXT, 
    date_of_birth   DATE,
    country         TEXT,
    website         TEXT
    PRIMARY KEY (user_id)
);

-- One to one relationship with table users
CREATE TABLE IF NOT EXISTS users_metadata(
    user_id         UUID REFERENCES users(user_id) ON DELETE CASCADE UNIQUE NOT NULL,           
    last_login_date DATE NOT NULL,
    account_creation_date DATE NOT NULL,
    last_ip4        VARCHAR(15)
    PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS posts(
    post_id         UUID PRIMARY KEY,
    user_id         UUID REFERENCES users(user_id),
    text_content    TEXT NOT NULL,
    file_content    BYTEA
);

CREATE TABLE IF NOT EXISTS posts_metadata(
    post_id         UUID REFERENCES posts(post_id),
    post_creation_date DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS hashtags(
    hashtag         VARCHAR(50) PRIMARY KEY,
);

CREATE TABLE IF NOT EXISTS posts_hashtags(
    post_id         UUID REFERENCES posts(post_id),
    hashtag         VARCHAR(50) REFERENCES hashtags(hashtag),
);
